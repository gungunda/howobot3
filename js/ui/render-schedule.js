// js/ui/render-schedule.js

import * as repo from "../data/repo.js";

const WEEK_ORDER = [
  ["monday", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"],
  ["tuesday", "–í—Ç–æ—Ä–Ω–∏–∫"],
  ["wednesday", "–°—Ä–µ–¥–∞"],
  ["thursday", "–ß–µ—Ç–≤–µ—Ä–≥"],
  ["friday", "–ü—è—Ç–Ω–∏—Ü–∞"],
  ["saturday", "–°—É–±–±–æ—Ç–∞"],
  ["sunday", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
];

function escapeHtml(s) {
  return String(s || "")
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;");
}

// –æ–±—ã—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏ (–±–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
function renderTaskRowView(task) {
  const offloadStr = Array.isArray(task.offloadDays)
    ? task.offloadDays.join(", ")
    : "";

  return `
    <div class="task-item"
         data-task-id="${escapeHtml(task.id)}"
         data-offload-days="${escapeHtml(offloadStr)}">
      <div class="task-line">
        <div class="task-line-main">
          <span class="task-title">${escapeHtml(task.title)}</span>
          <span class="task-minutes">${Number(task.minutes) || 0} –º–∏–Ω</span>
        </div>
        <div class="task-line-actions">
          <button class="week-edit" type="button" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úé</button>
          <button class="week-del"  type="button" title="–£–¥–∞–ª–∏—Ç—å">üóë</button>
        </div>
      </div>
      <div class="task-offload">
        ${offloadStr ? `–†–∞–∑–≥—Ä—É–∑–∫–∞: ${escapeHtml(offloadStr)}` : ""}
      </div>
    </div>
  `;
}

// —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è / –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
function renderTaskRowEdit(editState) {
  // editState = { weekday, taskId, title, minutes, offloadDays }
  const isNew = !editState.taskId;
  const offSet = new Set(editState.offloadDays || []);

  // —á–µ–∫–±–æ–∫—Å—ã –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π —Ä–∞–∑–≥—Ä—É–∑–∫–∏
  const checkboxesHtml = WEEK_ORDER.map(([wdKey, wdLabel]) => {
    const checked = offSet.has(wdKey) ? "checked" : "";
    return `
      <label class="offload-opt">
        <input class="week-offload-checkbox"
               type="checkbox"
               value="${wdKey}"
               ${checked}/>
        ${wdLabel}
      </label>
    `;
  }).join("");

  return `
    <div class="task-item editing"
         data-task-id="${isNew ? "NEW" : escapeHtml(editState.taskId)}">
      <div class="task-edit-block">
        <div class="task-edit-main">
          <input class="week-edit-title"
                 type="text"
                 value="${escapeHtml(editState.title)}"
                 placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞"/>
          <input class="week-edit-minutes"
                 type="number"
                 min="0"
                 value="${Number(editState.minutes) || 0}"
                 style="width:4em"/>
        </div>

        <div class="task-edit-actions">
          <button class="week-save"   type="button">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
          <button class="week-cancel" type="button">–û—Ç–º–µ–Ω–∞</button>
        </div>
      </div>

      <div class="task-offload-editor">
        <div class="hint small muted">–î–Ω–∏ —Ä–∞–∑–≥—Ä—É–∑–∫–∏:</div>
        <div class="offload-list">
          ${checkboxesHtml}
        </div>
      </div>
    </div>
  `;
}

// –æ–¥–∏–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Ü–µ–ª–∏–∫–æ–º
function renderDayBlock(weekdayKey, weekdayLabel, tasks, scheduleEdit) {
  // tasks ‚Äî –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è (–∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è)
  // scheduleEdit ‚Äî state.scheduleEdit –∏–ª–∏ null

  let rowsHtml = "";

  for (const t of tasks) {
    if (
      scheduleEdit &&
      scheduleEdit.weekday === weekdayKey &&
      scheduleEdit.taskId === t.id
    ) {
      // —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–º–µ–Ω–Ω–æ —ç—Ç—É –∑–∞–¥–∞—á—É
      rowsHtml += renderTaskRowEdit(scheduleEdit);
    } else {
      rowsHtml += renderTaskRowView(t);
    }
  }

  // –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É (taskId === null),
  // –∏ —ç—Ç–æ—Ç –¥–µ–Ω—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å scheduleEdit.weekday ‚Äî —Ä–∏—Å—É–µ–º —Ñ–æ—Ä–º—É –≤–Ω–∏–∑—É
  if (
    scheduleEdit &&
    scheduleEdit.weekday === weekdayKey &&
    !scheduleEdit.taskId
  ) {
    rowsHtml += renderTaskRowEdit(scheduleEdit);
  }

  return `
    <div class="week-day card" data-weekday="${weekdayKey}">
      <div class="week-day-head">
        <div class="week-day-title">${escapeHtml(weekdayLabel)}</div>
        <button class="week-add" type="button" title="–î–æ–±–∞–≤–∏—Ç—å">Ôºã</button>
      </div>

      <div class="week-day-tasks">
        ${
          rowsHtml ||
          `<div class="week-day-empty muted small">–ù–µ—Ç –∑–∞–¥–∞—á</div>`
        }
      </div>
    </div>
  `;
}

export async function updateScheduleView(state) {
  // –∏—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∫—É–¥–∞ –Ω–∞–¥–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
  const root = document.querySelector('[data-view="schedule"] [data-week]')
    || document.querySelector('[data-view="schedule"] .week-grid');

  if (!root) {
    console.warn("updateScheduleView: no [data-week] container");
    return;
  }

  // –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏
  const sched = await repo.loadSchedule();

  // —Å–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ü–Ω..–í—Å
  let fullHtml = "";
  for (const [wdKey, wdLabel] of WEEK_ORDER) {
    const dayTasks = Array.isArray(sched[wdKey]) ? sched[wdKey] : [];
    fullHtml += renderDayBlock(wdKey, wdLabel, dayTasks, state.scheduleEdit);
  }

  root.innerHTML = fullHtml;
}

export default { updateScheduleView };
