===FILE_START===
PATH: js/usecases/addTaskToSchedule.js
-----8<-----
import { loadSchedule, saveSchedule } from "../data/repo.js";
import { Schedule } from "../domain/entities.js";

/**
 * addTaskToSchedule
 *
 * Сценарий: пользователь добавляет новую задачу в расписание недели.
 *
 * Что происходит:
 *  1. Загружаем расписание (Schedule.fromJSON(...))
 *  2. Добавляем новую задачу в выбранный день недели
 *     через Schedule.withNewTask(weekdayKey, taskData)
 *  3. Сохраняем расписание обратно
 *
 * Пример taskData:
 * {
 *   title: "Математика, упр. 7",
 *   minutes: 30,
 *   offloadDays: ["tuesday", "thursday"]
 * }
 */
export default async function addTaskToSchedule({ weekdayKey, taskData }) {
  // 1. Загружаем текущее расписание
  const rawSchedule = await loadSchedule();
  const schedule = Schedule.fromJSON(rawSchedule);

  // 2. Добавляем новую задачу
  const updatedSchedule = schedule.withNewTask(weekdayKey, taskData);

  // 3. Сохраняем обратно
  await saveSchedule(updatedSchedule.toJSON(), "addTaskToSchedule");

  // 4. Возвращаем свежую копию расписания (для UI)
  return updatedSchedule;
}
-----8<-----
===FILE_END===


===FILE_START===
PATH: js/usecases/editTaskInSchedule.js
-----8<-----
import { loadSchedule, saveSchedule } from "../data/repo.js";
import { Schedule } from "../domain/entities.js";

/**
 * editTaskInSchedule
 *
 * Сценарий: пользователь редактирует задачу в расписании недели.
 *
 * Что меняется:
 *  - название
 *  - минуты
 *  - список offloadDays (разгрузочных дней)
 *
 * Всё это делается через метод Schedule.withEditedTask(...)
 */
export default async function editTaskInSchedule({ weekdayKey, taskId, patch }) {
  // 1. Загружаем текущее расписание
  const rawSchedule = await loadSchedule();
  const schedule = Schedule.fromJSON(rawSchedule);

  // 2. Получаем обновлённое расписание с изменённой задачей
  const updatedSchedule = schedule.withEditedTask(weekdayKey, taskId, patch);

  // 3. Сохраняем обратно
  await saveSchedule(updatedSchedule.toJSON(), "editTaskInSchedule");

  return updatedSchedule;
}
-----8<-----
===FILE_END===


===FILE_START===
PATH: js/usecases/deleteTaskFromSchedule.js
-----8<-----
import { loadSchedule, saveSchedule } from "../data/repo.js";
import { Schedule } from "../domain/entities.js";

/**
 * deleteTaskFromSchedule
 *
 * Сценарий: пользователь удаляет задачу из расписания недели.
 *
 * Логика:
 *  1. Загружаем расписание
 *  2. Вызываем Schedule.withTaskRemoved(weekdayKey, taskId)
 *  3. Сохраняем обратно
 */
export default async function deleteTaskFromSchedule({ weekdayKey, taskId }) {
  const rawSchedule = await loadSchedule();
  const schedule = Schedule.fromJSON(rawSchedule);

  const updatedSchedule = schedule.withTaskRemoved(weekdayKey, taskId);

  await saveSchedule(updatedSchedule.toJSON(), "deleteTaskFromSchedule");

  return updatedSchedule;
}
-----8<-----
===FILE_END===
